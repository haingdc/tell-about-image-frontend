#!/usr/bin/env -S deno run --allow-read --allow-write

import { join } from "https://deno.land/std/path/mod.ts";
import { exists } from "https://deno.land/std/fs/mod.ts";
import { readLines } from "https://deno.land/std/io/mod.ts";
import { Select } from "https://deno.land/x/cliffy@v0.25.7/prompt/mod.ts";

// Define the paths
const PATHS = {
  iconmoon: "../documents/iconmoon",
  iconsRaw: "../documents/icons-raw",
  iconsCleanup: "../documents/icons-cleanup",
};

const ICONS_OUTPUT_DIR = "../app/ui/icons";

/**
 * Prompt the user for input
 * @param message The message to display
 * @returns The user input
 */
async function prompt(message: string): Promise<string> {
  console.log(message);
  const reader = readLines(Deno.stdin);
  const line = await reader.next();

  if (line.done) {
    return "";
  }

  return line.value;
}

/**
 * Select a path from the available options using arrow keys
 * @returns The selected path
 */
async function selectPath(): Promise<string> {
  try {
    const pathOptions = Object.entries(PATHS).map(([key, path]) => ({
      name: `${key} (${path})`,
      value: path,
    }));

    const selectedPath = await Select.prompt({
      message: "Select a path:",
      options: pathOptions,
    });

    return selectedPath;
  } catch (error) {
    console.error(`Error during path selection: ${error.message}`);
    Deno.exit(1);
  }
}

/**
 * Read the SVG file content
 * @param path The path to the file
 * @returns The file content
 */
async function readSvgFile(path: string): Promise<string> {
  try {
    return await Deno.readTextFile(path);
  } catch (error) {
    console.error(`Error reading file: ${error.message}`);
    throw error;
  }
}

/**
 * Clean SVG content by removing icomoon-ignore tags and IcoMoon comments
 * @param svgContent The SVG content
 * @returns The cleaned SVG content
 */
function cleanSvgContent(svgContent: string): string {
  // Remove <g id="icomoon-ignore">...</g> tags
  const withoutIcomoonIgnore = svgContent.replace(
    /<g id="icomoon-ignore">[\s\S]*?<\/g>/g,
    "",
  );

  // Remove "<!-- Generated by IcoMoon.io -->" comments
  return withoutIcomoonIgnore.replace(/<!-- Generated by IcoMoon\.io -->/g, "");
}

/**
 * Create a Vue component file
 * @param iconName The name of the icon
 * @param svgContent The SVG content
 */
async function createVueComponent(
  iconName: string,
  svgContent: string,
): Promise<void> {
  const outputDir = new URL(ICONS_OUTPUT_DIR, import.meta.url).pathname;
  const outputPath = join(outputDir, `${iconName}.tsx`);

  // Check if the output directory exists, create it if not
  try {
    await Deno.stat(outputDir);
  } catch (error) {
    if (error instanceof Deno.errors.NotFound) {
      await Deno.mkdir(outputDir, { recursive: true });
      console.log(`Created directory: ${outputDir}`);
    } else {
      console.error(`Error checking directory: ${error.message}`);
      throw error;
    }
  }

  // Check if the file already exists
  const fileExists = await exists(outputPath);

  if (fileExists) {
    const answer = await prompt(
      `File ${outputPath} already exists. Replace it? (y/n):`,
    );
    if (answer.toLowerCase() !== "y") {
      console.log("Operation canceled.");
      return;
    }
  }

  // Clean SVG content
  const cleanedSvgContent = cleanSvgContent(svgContent);

  // Create the React component
  const reactContent = `
const ${iconName} = () => {
  return ${cleanedSvgContent.trim()};
};

export default ${iconName};
`;

  try {
    await Deno.writeTextFile(outputPath, reactContent);
    console.log(`Created React component: ${outputPath}`);
  } catch (error) {
    console.error(`Error writing file: ${error.message}`);
    throw error;
  }
}

/**
 * Main function
 */
async function main() {
  try {
    // Select the path using arrow keys
    const selectedPath = await selectPath();
    console.log(`Selected path: ${selectedPath}`);

    // Prompt for icon name
    const iconName = await prompt(
      "Enter the icon name (without .svg extension):",
    );
    if (!iconName) {
      console.error("Icon name is required.");
      return;
    }

    const svgPath = join(
      new URL(selectedPath, import.meta.url).pathname,
      `${iconName}.svg`,
    );

    // Read the SVG file
    const svgContent = await readSvgFile(svgPath);

    // Create the Vue component
    await createVueComponent(iconName, svgContent);
  } catch (error) {
    console.error(`An error occurred: ${error.message}`);
  }
}

// Run the main function
main();
